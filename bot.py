import asyncio
import logging
import re
from collections import defaultdict
from typing import List

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, KeyboardButton, ReplyKeyboardMarkup,
    InputMediaPhoto, InputMediaVideo
)

from config import (
    TOKEN, ADMIN_CHAT_ID, TOPIC_MATERIAL, TOPIC_QUESTION,
    TEXT_WELCOME, TEXT_MATERIAL_INSTR, TEXT_QUESTION_INSTR,
    TEXT_BACK_BTN, TEXT_MENU_TITLE, TEXT_THANKS_MATERIAL, TEXT_THANKS_QUESTION,
    ALBUM_CHUNK
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
log = logging.getLogger("bot")

# ---------- BOT / DP ----------
bot = Bot(TOKEN)
dp = Dispatcher()

# ---------- –ö–õ–ê–í–ò–ê–¢–£–†–´ ----------
menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")],
        [KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")]
    ],
    resize_keyboard=True
)
back_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=TEXT_BACK_BTN)]],
    resize_keyboard=True
)

# ---------- –ü–†–û–°–¢–ï–ô–®–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ----------
# user_mode[user_id] = "material" | "question" | None
user_mode: dict[int, str | None] = defaultdict(lambda: None)

# –ö–æ–ø–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –∞–ª—å–±–æ–º–æ–≤ –ø–æ –∫–ª—é—á—É (user_id, media_group_id)
albums: dict[tuple[int, str], List[InputMediaPhoto | InputMediaVideo]] = {}

# –ü—Ä–∏–≤—è–∑–∫–∞ msg_id –≤ —Ç–µ–º–µ -> user_id, —á—Ç–æ–±—ã –∞–¥–º–∏–Ω –º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ä–µ–ø–ª–∞–µ–º
topic_link: dict[int, int] = {}

# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ----------
ID_RE = re.compile(r"\(id=(\d+)\)")

def user_tag(m: Message) -> str:
    uname = f"@{m.from_user.username}" if m.from_user.username else m.from_user.full_name
    return f"{uname} (id={m.from_user.id})"

async def send_album_in_chunks(chat_id: int, thread_id: int, media_list: List[InputMediaPhoto | InputMediaVideo]):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º –ø–∞—á–∫–∞–º–∏ –ø–æ 10, –µ—Å–ª–∏ –º–µ–¥–∏–∞ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞."""
    if not media_list:
        return []
    chunks = [media_list[i:i+ALBUM_CHUNK] for i in range(0, len(media_list), ALBUM_CHUNK)]
    sent_msgs = []
    for chunk in chunks:
        sent = await bot.send_media_group(chat_id=chat_id, message_thread_id=thread_id, media=chunk)
        sent_msgs.extend(sent)
        await asyncio.sleep(0.2)  # –ª—ë–≥–∫–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–¥–∏—Ä–∞—Ç—å CPU –∏ –Ω–µ –ª–æ–≤–∏—Ç—å flood
    return sent_msgs

# ---------- –•–≠–ù–î–õ–ï–†–´ ----------
@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_mode[message.from_user.id] = None
    await message.answer(TEXT_WELCOME, reply_markup=menu_kb)

@dp.message(F.text == "üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")
async def choose_material(message: Message):
    user_mode[message.from_user.id] = "material"
    await message.answer(TEXT_MATERIAL_INSTR, reply_markup=back_kb)

@dp.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def choose_question(message: Message):
    user_mode[message.from_user.id] = "question"
    await message.answer(TEXT_QUESTION_INSTR, reply_markup=back_kb)

@dp.message(F.text == TEXT_BACK_BTN)
async def back_to_menu(message: Message):
    user_mode[message.from_user.id] = None
    await message.answer(TEXT_MENU_TITLE, reply_markup=menu_kb)

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@dp.message(F.chat.type == "private")
async def handle_user_private(message: Message):
    mode = user_mode.get(message.from_user.id)

    # 1) –†–µ–∂–∏–º –í–û–ü–†–û–°
    if mode == "question":
        if message.text:
            header = f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç {user_tag(message)}:\n\n{message.text}"
        else:
            header = f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç {user_tag(message)}"
        sent = await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            message_thread_id=TOPIC_QUESTION,
            text=header
        )
        topic_link[sent.message_id] = message.from_user.id
        await message.answer(TEXT_THANKS_QUESTION, reply_markup=menu_kb)
        user_mode[message.from_user.id] = None
        return

    # 2) –†–µ–∂–∏–º –ú–ê–¢–ï–†–ò–ê–õ
    if mode == "material":
        # --- –∞–ª—å–±–æ–º—ã ---
        if message.media_group_id and (message.photo or message.video):
            key = (message.from_user.id, message.media_group_id)
            bucket = albums.setdefault(key, [])
            if message.photo:
                bucket.append(InputMediaPhoto(media=message.photo[-1].file_id))
            elif message.video:
                bucket.append(InputMediaVideo(media=message.video.file_id))

            # ¬´–¥–µ–±–∞—É–Ω—Å¬ª ‚Äî –∂–¥—ë–º –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ –∂–µ –∞–ª—å–±–æ–º–∞
            await asyncio.sleep(1.2)
            if key in albums and bucket is albums[key]:
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–¥–∏–Ω —Ä–∞–∑
                caption_msg = await bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    message_thread_id=TOPIC_MATERIAL,
                    text=f"üì© –ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç {user_tag(message)}:"
                )
                topic_link[caption_msg.message_id] = message.from_user.id

                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º –∞–ª—å–±–æ–º –±–∞—Ç—á–∞–º–∏
                await send_album_in_chunks(ADMIN_CHAT_ID, TOPIC_MATERIAL, bucket)

                # —á–∏—Å—Ç–∏–º –ø–∞–º—è—Ç—å
                albums.pop(key, None)

                # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.answer(TEXT_THANKS_MATERIAL, reply_markup=menu_kb)
                user_mode[message.from_user.id] = None
            return

        # –æ–¥–∏–Ω–æ—á–Ω—ã–µ –º–µ–¥–∏–∞ / –¥–æ–∫—É–º–µ–Ω—Ç—ã
        if message.photo or message.video or message.document:
            header = await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                message_thread_id=TOPIC_MATERIAL,
                text=f"üì© –ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç {user_tag(message)}:"
            )
            topic_link[header.message_id] = message.from_user.id

            if message.photo:
                await bot.send_photo(ADMIN_CHAT_ID, message.photo[-1].file_id, message_thread_id=TOPIC_MATERIAL)
            elif message.video:
                await bot.send_video(ADMIN_CHAT_ID, message.video.file_id, message_thread_id=TOPIC_MATERIAL)
            elif message.document:
                await bot.send_document(ADMIN_CHAT_ID, message.document.file_id, message_thread_id=TOPIC_MATERIAL)

            await message.answer(TEXT_THANKS_MATERIAL, reply_markup=menu_kb)
            user_mode[message.from_user.id] = None
            return

        # —Ç–µ–∫—Å—Ç –Ω–µ –≤ —Ç–µ–º—É ‚Äî –Ω–∞–ø–æ–º–Ω–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        await message.answer(TEXT_MATERIAL_INSTR, reply_markup=back_kb)
        return

    # –≤–Ω–µ —Ä–µ–∂–∏–º–∞ ‚Äî –ø–æ–∫–∞–∂–µ–º –º–µ–Ω—é
    await message.answer(TEXT_MENU_TITLE, reply_markup=menu_kb)

# --- –û—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∞ –≤ —Ç–µ–º–∞—Ö –≥—Ä—É–ø–ø—ã ---
@dp.message(F.chat.id == ADMIN_CHAT_ID)
async def relay_admin_reply(message: Message):
    # —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ç–µ–º–µ
    if not message.reply_to_message:
        return

    # 1) –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ user_id –∏–∑ –Ω–∞—à–µ–π –∫–∞—Ä—Ç—ã
    user_id = topic_link.get(message.reply_to_message.message_id)

    # 2) –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ "(id=12345)"
    if not user_id:
        src = message.reply_to_message.text or message.reply_to_message.caption or ""
        m = ID_RE.search(src)
        if m:
            try:
                user_id = int(m.group(1))
            except ValueError:
                user_id = None

    if not user_id:
        return  # –Ω–µ –Ω–∞—à–ª–∏ –∞–¥—Ä–µ—Å–∞—Ç–∞

    try:
        if message.text:
            await bot.send_message(user_id, f"üí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")
        elif message.photo:
            await bot.send_photo(user_id, message.photo[-1].file_id, caption="üí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        elif message.video:
            await bot.send_video(user_id, message.video.file_id, caption="üí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        elif message.document:
            await bot.send_document(user_id, message.document.file_id, caption="üí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# ---------- –ó–ê–ü–£–°–ö ----------
async def main():
    log.info("[BOT] –ó–∞–ø—É—Å–∫‚Ä¶")
    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–¥–∞–ª–∏–º –≤–µ–±—Ö—É–∫ –∏ –æ—Ç–±—Ä–æ—Å–∏–º —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    await dp.start_polling(bot, allowed_updates=None)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("[BOT] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")