import asyncio
import logging
import re
from collections import defaultdict
from typing import List

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, KeyboardButton, ReplyKeyboardMarkup,
    InputMediaPhoto, InputMediaVideo
)

from config import (
    TOKEN, ADMIN_CHAT_ID, TOPIC_MATERIAL, TOPIC_QUESTION,
    TEXT_BACK_BTN, TEXT_MENU_TITLE
)

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–û–í ---
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("bot")

bot = Bot(TOKEN)
dp = Dispatcher()

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")],
        [KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")]
    ],
    resize_keyboard=True
)
back_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=TEXT_BACK_BTN)]],
    resize_keyboard=True
)

# --- –°–û–°–¢–û–Ø–ù–ò–Ø –ò –°–í–Ø–ó–ö–ò ---
user_mode = defaultdict(lambda: None)              # user_id -> —Ä–µ–∂–∏–º ("material"/"question")
albums = {}                                        # (user_id, media_group_id) -> —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
topic_link = {}                                    # message_id –≤ —Ç–æ–ø–∏–∫–µ -> user_id
ID_RE = re.compile(r"\(id=(\d+)\)")

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ---
def user_tag(m: Message) -> str:
    uname = f"@{m.from_user.username}" if m.from_user.username else m.from_user.full_name
    return f"{uname} (id={m.from_user.id})"

# --- –°–¢–ê–†–¢ ---
@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_mode[message.from_user.id] = None
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:", reply_markup=menu_kb)

# --- –ö–ù–û–ü–ö–ò ---
@dp.message(F.text == "üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")
async def choose_material(message: Message):
    user_mode[message.from_user.id] = "material"
    await message.answer("üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –º–∞—Ç–µ—Ä–∏–∞–ª, –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=back_kb)

@dp.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def choose_question(message: Message):
    user_mode[message.from_user.id] = "question"
    await message.answer("üí¨ –ù–∞–ø–∏—à–∏ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —É—Ä–æ–∫–∞–º —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä—ã –∏ —Å–ø–æ—Ä—Ç—É –≤ —à–∫–æ–ª–µ. –ò —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—è—Ç –∑–¥–µ—Å—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=back_kb)

@dp.message(F.text == TEXT_BACK_BTN)
async def back_to_menu(message: Message):
    user_mode[message.from_user.id] = None
    await message.answer(TEXT_MENU_TITLE, reply_markup=menu_kb)

# --- –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
@dp.message(F.chat.type == "private")
async def handle_user_message(message: Message):
    mode = user_mode.get(message.from_user.id)
    uid = message.from_user.id
    tag = user_tag(message)

    # ---- –í–û–ü–†–û–° ----
    if mode == "question":
        msg = await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            message_thread_id=TOPIC_QUESTION,
            text=f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç {tag}:\n{message.text or ''}"
        )
        topic_link[msg.message_id] = uid
        await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç.", reply_markup=menu_kb)
        user_mode[uid] = None
        return

    # ---- –ú–ê–¢–ï–†–ò–ê–õ ----
    if mode == "material":
        # --- –µ—Å–ª–∏ –∞–ª—å–±–æ–º ---
        if message.media_group_id and (message.photo or message.video):
            key = (uid, message.media_group_id)
            bucket = albums.setdefault(key, [])
            if message.photo:
                bucket.append(InputMediaPhoto(media=message.photo[-1].file_id))
            elif message.video:
                bucket.append(InputMediaVideo(media=message.video.file_id))

            # –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞
            await asyncio.sleep(1.5)
            if key in albums and bucket is albums[key]:
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å –º–∞—Ç–µ—Ä–∏–∞–ª –°–ù–ê–ß–ê–õ–ê
                sent_media = await bot.send_media_group(
                    chat_id=ADMIN_CHAT_ID,
                    message_thread_id=TOPIC_MATERIAL,
                    media=bucket
                )

                # –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
                caption_msg = await bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    message_thread_id=TOPIC_MATERIAL,
                    text=f"üì© –ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç {tag}"
                )
                topic_link[caption_msg.message_id] = uid

                # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.answer("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!", reply_markup=menu_kb)
                user_mode[uid] = None
                albums.pop(key, None)
            return

        # --- –æ–¥–∏–Ω–æ—á–Ω–æ–µ –º–µ–¥–∏–∞ ---
        if message.photo or message.video or message.document:
            # —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            if message.photo:
                await bot.send_photo(ADMIN_CHAT_ID, message.photo[-1].file_id, message_thread_id=TOPIC_MATERIAL)
            elif message.video:
                await bot.send_video(ADMIN_CHAT_ID, message.video.file_id, message_thread_id=TOPIC_MATERIAL)
            elif message.document:
                await bot.send_document(ADMIN_CHAT_ID, message.document.file_id, message_thread_id=TOPIC_MATERIAL)

            # –∑–∞—Ç–µ–º –ø–æ–¥–ø–∏—Å—å
            sent = await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                message_thread_id=TOPIC_MATERIAL,
                text=f"üì© –ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç {tag}"
            )
            topic_link[sent.message_id] = uid

            await message.answer("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!", reply_markup=menu_kb)
            user_mode[uid] = None
            return

        # --- –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π ---
        await message.answer("üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –º–∞—Ç–µ—Ä–∏–∞–ª, –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=back_kb)
        return

    # –µ—Å–ª–∏ –≤–Ω–µ —Ä–µ–∂–∏–º–∞
    await message.answer(TEXT_MENU_TITLE, reply_markup=menu_kb)

# --- –û–¢–í–ï–¢ –ê–î–ú–ò–ù–ê ---
@dp.message(F.chat.id == ADMIN_CHAT_ID)
async def handle_admin_reply(message: Message):
    """–õ—é–±–æ–π reply –∏–∑ —Ç–æ–ø–∏–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—Ç."""
    if not message.reply_to_message:
        return

    # –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ user_id –∏–∑ topic_link
    user_id = topic_link.get(message.reply_to_message.message_id)

    # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø–∞—Ä—Å–∏–º (id=12345)
    if not user_id:
        src = message.reply_to_message.text or message.reply_to_message.caption or ""
        match = ID_RE.search(src)
        if match:
            try:
                user_id = int(match.group(1))
            except ValueError:
                user_id = None

    if not user_id:
        return

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    try:
        if message.text:
            await bot.send_message(user_id, f"üí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")
        elif message.photo:
            await bot.send_photo(user_id, message.photo[-1].file_id, caption="üí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        elif message.video:
            await bot.send_video(user_id, message.video.file_id, caption="üí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        elif message.document:
            await bot.send_document(user_id, message.document.file_id, caption="üí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

# --- –ó–ê–ü–£–°–ö ---
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    log.info("[BOT] –ó–∞–ø—É—Å–∫‚Ä¶")
    await dp.start_polling(bot, allowed_updates=None)

if __name__ == "__main__":
    asyncio.run(main())
