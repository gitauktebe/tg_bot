import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputMediaVideo
from aiogram.utils import executor
import asyncio

# -------------------------------
# üîß –ù–ê–°–¢–†–û–ô–ö–ò
# -------------------------------
TOKEN = "8404546108:AAHM0CcJzk-7Mvrmk0K2tnnAD_-lUT19aI4"

# ID —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–æ–≤
CHAT_ID = -1002629914250
TOPIC_MATERIAL = 3   # "–í —Ä–∞–±–æ—Ç–µ"
TOPIC_QUESTION = 2   # "–í–æ–ø—Ä–æ—Å—ã"

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä—è–º–æ –∑–¥–µ—Å—å)
INSTRUCTION_MATERIAL = (
    "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.\n"
    "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —è –ø–µ—Ä–µ–¥–∞–º –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª ¬´–í —Ä–∞–±–æ—Ç–µ¬ª."
)
INSTRUCTION_QUESTION = (
    "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n"
    "–û–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–í–æ–ø—Ä–æ—Å—ã¬ª, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø—Ä—è–º–æ —Å—é–¥–∞."
)

# -------------------------------
# üß© –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø
# -------------------------------
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# -------------------------------
# üß† –•–†–ê–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
# -------------------------------
user_state = {}  # user_id: "material" / "question"

# -------------------------------
# üìã –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
# -------------------------------
def main_menu():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"))
    kb.add(InlineKeyboardButton("üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="send_material"))
    return kb

# -------------------------------
# üìç –°–¢–ê–†–¢
# -------------------------------
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    user_state.pop(message.from_user.id, None)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=main_menu()
    )

# -------------------------------
# üìç –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö
# -------------------------------
@dp.callback_query_handler(lambda c: c.data in ["ask_question", "send_material", "back_to_menu"])
async def process_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    if callback.data == "ask_question":
        user_state[user_id] = "question"
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        await callback.message.edit_text(INSTRUCTION_QUESTION, reply_markup=kb)

    elif callback.data == "send_material":
        user_state[user_id] = "material"
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        await callback.message.edit_text(INSTRUCTION_MATERIAL, reply_markup=kb)

    elif callback.data == "back_to_menu":
        user_state.pop(user_id, None)
        await callback.message.edit_text("üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# -------------------------------
# üì® –ü–û–õ–£–ß–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô
# -------------------------------
@dp.message_handler(content_types=types.ContentTypes.ANY)
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name

    state = user_state.get(user_id)

    # --- –í–û–ü–†–û–° ---
    if state == "question":
        await bot.send_message(
            chat_id=CHAT_ID,
            message_thread_id=TOPIC_QUESTION,
            text=f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç {username} (id={user_id}):\n\n{message.text or ''}"
        )
        await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n‚¨ÖÔ∏è –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=main_menu())

    # --- –ú–ê–¢–ï–†–ò–ê–õ (–∞–ª—å–±–æ–º—ã) ---
    elif state == "material":
        media_group = []
        if message.media_group_id:
            # –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞
            state_media = user_state.setdefault(f"album_{message.media_group_id}", [])
            if message.photo:
                file_id = message.photo[-1].file_id
                state_media.append(InputMediaPhoto(media=file_id))
            elif message.video:
                file_id = message.video.file_id
                state_media.append(InputMediaVideo(media=file_id))

            # –∂–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã
            await asyncio.sleep(1.5)
            if len(state_media) > 0 and state_media == user_state.get(f"album_{message.media_group_id}"):
                await bot.send_message(
                    chat_id=CHAT_ID,
                    message_thread_id=TOPIC_MATERIAL,
                    text=f"üì© –ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç {username} (id={user_id}):"
                )
                await bot.send_media_group(
                    chat_id=CHAT_ID,
                    message_thread_id=TOPIC_MATERIAL,
                    media=state_media
                )
                del user_state[f"album_{message.media_group_id}"]

        else:
            # –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
            await bot.send_message(
                chat_id=CHAT_ID,
                message_thread_id=TOPIC_MATERIAL,
                text=f"üì© –ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç {username} (id={user_id}):"
            )
            if message.photo:
                await bot.send_photo(chat_id=CHAT_ID, message_thread_id=TOPIC_MATERIAL, photo=message.photo[-1].file_id)
            elif message.video:
                await bot.send_video(chat_id=CHAT_ID, message_thread_id=TOPIC_MATERIAL, video=message.video.file_id)
            elif message.document:
                await bot.send_document(chat_id=CHAT_ID, message_thread_id=TOPIC_MATERIAL, document=message.document.file_id)

        await message.answer("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n‚¨ÖÔ∏è –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=main_menu())

# -------------------------------
# üîÅ –û–¢–í–ï–¢ –ê–î–ú–ò–ù–ê
# -------------------------------
@dp.message_handler(lambda msg: msg.chat.id == CHAT_ID and msg.is_reply)
async def handle_admin_reply(message: types.Message):
    try:
        text = message.reply_to_message.text
        if not text:
            return

        user_id = None
        for part in text.split():
            if part.startswith("(id="):
                user_id = int(part[4:-2])
                break

        if user_id:
            reply_text = f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}"
            await bot.send_message(chat_id=user_id, text=reply_text)
            logging.info(f"[BOT] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        logging.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

# -------------------------------
# üöÄ –ó–ê–ü–£–°–ö
# -------------------------------
if __name__ == "__main__":
    logging.info("[BOT] –ó–∞–ø—É—Å–∫...")
    executor.start_polling(dp, skip_updates=True)
