import asyncio
import time
from collections import defaultdict
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InputMediaPhoto, InputMediaVideo
)
from aiogram.filters import CommandStart

# === –ö–û–ù–§–ò–ì ===
TOKEN = "8404546108:AAHM0CcJzk-7Mvrmk0K2tnnAD_-lUT19aI4"
ADMIN_CHAT_ID = -1002629914250     # —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –∞–¥–º–∏–Ω–æ–≤
TOPIC_WORK = 3                     # —Ç–µ–º–∞ "–í —Ä–∞–±–æ—Ç–µ"
TOPIC_QUESTIONS = 2                # —Ç–µ–º–∞ "–í–æ–ø—Ä–æ—Å—ã"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# === –•–†–ê–ù–ò–õ–ö–ò –°–û–°–¢–û–Ø–ù–ò–òÃÜ ===
user_state: dict[int, str | None] = {}       # {user_id: "work"|"question"|None}
message_links: dict[int, int] = {}           # {group_message_id: user_id} ‚Äî –¥–ª—è reply –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
album_buffer: dict[str, list[Message]] = defaultdict(list)  # {media_group_id: [messages]}
header_sessions: dict[int, dict] = {}        # {user_id: {"expires": ts, "thread_id": int, "header_msg_id": int}}
header_links: dict[int, int] = {}            # {header_message_id: user_id} ‚Äî —á—Ç–æ–±—ã reply –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–ª

HEADER_TTL = 60  # —Å–µ–∫; —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—á–∏—Ç–∞–µ–º ¬´–æ–¥–Ω–æ–∏ÃÜ —Å–µ—Å—Å–∏–µ–∏ÃÜ¬ª –¥–ª—è –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")],
        [KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")]
    ],
    resize_keyboard=True
)
back_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï =====
def user_label(m: Message) -> str:
    return f"{m.from_user.full_name} (@{m.from_user.username})" if m.from_user.username else m.from_user.full_name

async def ensure_header(user_id: int, thread_id: int, prefix_text: str) -> int | None:
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ ¬´—Å–µ—Å—Å–∏–∏¬ª.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç message_id –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–µ—Å–ª–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–µ–∏ÃÜ—á–∞—Å), –∏–Ω–∞—á–µ None.
    """
    now = time.time()
    sess = header_sessions.get(user_id)
    need_header = (
        not sess or
        now > sess.get("expires", 0) or
        sess.get("thread_id") != thread_id
    )
    if need_header:
        msg = await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=prefix_text,
            message_thread_id=thread_id
        )
        header_sessions[user_id] = {
            "expires": now + HEADER_TTL,
            "thread_id": thread_id,
            "header_msg_id": msg.message_id
        }
        header_links[msg.message_id] = user_id  # —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä—è–º–æ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        return msg.message_id
    return None

def thread_and_prefix(state: str, m: Message) -> tuple[int, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (thread_id, header_text) –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    uname = user_label(m)
    if state == "question":
        return (TOPIC_QUESTIONS, f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç {uname} (id={m.from_user.id}):")
    else:
        return (TOPIC_WORK, f"üì§ –ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç {uname} (id={m.from_user.id}):")

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====
@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_state[message.from_user.id] = None
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

@dp.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")
async def set_work(message: Message):
    user_state[message.from_user.id] = "work"
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ + –¥–∞–∏ÃÜ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", reply_markup=back_kb)

@dp.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def set_question(message: Message):
    user_state[message.from_user.id] = "question"
    await message.answer("–ó–∞–¥–∞–∏ÃÜ –ª—é–±–æ–∏ÃÜ –≤–æ–ø—Ä–æ—Å –ø–æ —É—Ä–æ–∫—É —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä—ã –∏ —Å–ø–æ—Ä—Ç—É –≤ —à–∫–æ–ª–µ. –Ø –æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ.", reply_markup=back_kb)

@dp.message(F.text.in_(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨Ö –ù–∞–∑–∞–¥"]))
async def go_back(message: Message):
    user_state[message.from_user.id] = None
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

# --- –ê–õ–¨–ë–û–ú–´ (media_group) ---
@dp.message(F.media_group_id, F.chat.type == "private")
async def handle_album(message: Message):
    state = user_state.get(message.from_user.id)
    if state not in ["work", "question"]:
        return

    mgid = message.media_group_id
    album_buffer[mgid].append(message)

    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ —á–∞—Å—Ç–∏ –∞–ª—å–±–æ–º–∞
    await asyncio.sleep(1.1)

    # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ¬´–≤—ã–≥—Ä–µ–±–∞–µ—Ç¬ª –ø–∞–∫–µ—Ç
    messages = album_buffer.pop(mgid, None)
    if not messages:
        return

    thread_id, header_text = thread_and_prefix(state, message)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –û–î–ò–ù –†–ê–ó –≤ –Ω–∞—á–∞–ª–µ (–Ω–∞ –ø–µ—Ä–≤—É—é –ø–∞—á–∫—É, –∞ –¥–∞–ª—å—à–µ –≤ —Ç–µ—á–µ–Ω–∏–µ HEADER_TTL –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º)
    await ensure_header(message.from_user.id, thread_id, header_text)

    # –ì–æ—Ç–æ–≤–∏–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ). Telegram –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–æ 10 –≤ –æ–¥–Ω–æ–º –≤—ã–∑–æ–≤–µ.
    media: list[InputMediaPhoto | InputMediaVideo] = []
    for m in messages:
        if m.photo:
            # –ë–µ—Ä–µÃà–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            media.append(InputMediaPhoto(media=m.photo[-1].file_id))
        elif m.video:
            media.append(InputMediaVideo(media=m.video.file_id))
        # NOTE: –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∞–ª—å–±–æ–º –Ω–µ –≤—Ö–æ–¥—è—Ç ‚Äî –µ—Å–ª–∏ –Ω–∞–¥–æ, –ø—Ä–∏—Å—ã–ª–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç—Å—è –Ω–∏–∂–Ω–∏–º —Ö—ç–Ω–¥–ª–µ—Ä–æ–º

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—á–∫–æ–∏ÃÜ
    sent_msgs = await bot.send_media_group(chat_id=ADMIN_CHAT_ID, media=media, message_thread_id=thread_id)

    # –õ—é–±–æ–∏ÃÜ reply –Ω–∞ –õ–Æ–ë–û–ï –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–∏ÃÜ –ø–∞—á–∫–∏ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for s in sent_msgs:
        message_links[s.message_id] = message.from_user.id

# --- –û–î–ò–ù–û–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –ò–ó –õ–ò–ß–ö–ò ---
@dp.message(F.chat.type == "private")
async def handle_single(message: Message):
    state = user_state.get(message.from_user.id)
    if state not in ["work", "question"]:
        return

    thread_id, header_text = thread_and_prefix(state, message)

    if message.text:
        # –î–ª—è —Ç–µ–∫—Å—Ç–∞ —É–¥–æ–±–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ–∏ÃÜ —Å—Ç—Ä–æ–∫–æ–∏ÃÜ —Å –ø–æ–¥–ø–∏—Å—å—é
        sent = await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"{header_text}\n{message.text}",
            message_thread_id=thread_id
        )
        message_links[sent.message_id] = message.from_user.id
    else:
        # –î–ª—è –º–µ–¥–∏–∞/—Ñ–∞–∏ÃÜ–ª–æ–≤ ‚Äî –≤—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ —Å–µ—Å—Å–∏—é,
        # –∑–∞—Ç–µ–º –∫–æ–ø–∏—Ä—É–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É
        await ensure_header(message.from_user.id, thread_id, header_text)
        copy = await message.send_copy(chat_id=ADMIN_CHAT_ID, message_thread_id=thread_id)
        message_links[copy.message_id] = message.from_user.id

# ===== –û–¢–í–ï–¢–´ –ê–î–ú–ò–ù–û–í –ò–ó –ì–†–£–ü–ü–´ =====
@dp.message(F.chat.id == ADMIN_CHAT_ID)
async def admin_reply(message: Message):
    if not message.reply_to_message:
        return

    # –°–º–æ—Ç—Ä–∏–º, –Ω–∞ —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –∞–¥–º–∏–Ω: –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞/—Ç–µ–∫—Å—Ç–∞
    orig_id = message.reply_to_message.message_id
    user_id = message_links.get(orig_id) or header_links.get(orig_id)

    if not user_id:
        return  # –Ω–µ –Ω–∞—à–ª–∏ —Å–≤—è–∑—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–¥–ø–∏—Å—å—é
    if message.text:
        await bot.send_message(chat_id=user_id, text=f"üì© –û—Ç–≤–µ—Ç –æ—Ç —É—á–∏—Ç–µ–ª—è:\n\n{message.text}")

    # –ï—Å–ª–∏ —É –∞–¥–º–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–∏—è ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if any([message.photo, message.document, message.video, message.audio, message.voice, message.sticker, message.animation]):
        await message.send_copy(chat_id=user_id)

# ===== –ó–ê–ü–£–°–ö =====
async def main():
    print("[BOT] –ó–∞–ø—É—Å–∫...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
