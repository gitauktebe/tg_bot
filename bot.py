from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
import asyncio

# === –ù–ê–°–¢–†–û–òÃÜ–ö–ò ===
TOKEN = "8404546108:AAHM0CcJzk-7Mvrmk0K2tnnAD_-lUT19aI4"
ADMIN_CHAT_ID = -1002629914250
TOPIC_WORK = 3
TOPIC_QUESTIONS = 2

bot = Bot(token=TOKEN)
dp = Dispatcher()

user_state = {}       # {user_id: "work" –∏–ª–∏ "question"}
message_links = {}    # {group_msg_id: user_id}

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")],
        [KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")]
    ],
    resize_keyboard=True
)

back_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)

# /start
@dp.message(CommandStart())
async def start_cmd(message: Message):
    print(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ({message.from_user.full_name}) –Ω–∞–∂–∞–ª /start")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ:", reply_markup=main_kb)
    user_state.pop(message.from_user.id, None)

# –ù–∞–∑–∞–¥
@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: Message):
    print(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é")
    user_state.pop(message.from_user.id, None)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_kb)

# –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª
@dp.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")
async def send_material(message: Message):
    user_state[message.from_user.id] = "work"
    print(f"[STATE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Ç–µ–ø–µ—Ä—å –≤ —Ä–µ–∂–∏–º–µ '–ú–∞—Ç–µ—Ä–∏–∞–ª'")
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ + –¥–∞–∏ÃÜ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", reply_markup=back_kb)

# –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
@dp.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: Message):
    user_state[message.from_user.id] = "question"
    print(f"[STATE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Ç–µ–ø–µ—Ä—å –≤ —Ä–µ–∂–∏–º–µ '–í–æ–ø—Ä–æ—Å'")
    await message.answer("–ó–∞–¥–∞–∏ÃÜ –ª—é–±–æ–∏ÃÜ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ–º–æ —É—Ä–æ–∫–∞ —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä—ã –∏ —Å–ø–æ—Ä—Ç–∞ –≤ —à–∫–æ–ª–µ, –∞ —è —Ç–µ–±–µ –æ—Ç–≤–µ—á—É –≤ –±–ª–∏–∂–∞–∏ÃÜ—à–µ–µ –≤—Ä–µ–º—è", reply_markup=back_kb)

# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ÃÜ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
@dp.message(F.chat.type == "private")
async def forward_to_group(message: Message):
    state = user_state.get(message.from_user.id)
    if state not in ["work", "question"]:
        return

    user_name = f"{message.from_user.full_name} (@{message.from_user.username})" if message.from_user.username else message.from_user.full_name
    prefix = "üì§ –ú–∞—Ç–µ—Ä–∏–∞–ª" if state == "work" else "‚ùì –í–æ–ø—Ä–æ—Å"
    thread_id = TOPIC_WORK if state == "work" else TOPIC_QUESTIONS

    # –¢–µ–∫—Å—Ç
    if message.text:
        content = f"{prefix} –æ—Ç {user_name} (id={message.from_user.id}):\n{message.text}"
        sent = await bot.send_message(chat_id=ADMIN_CHAT_ID, text=content, message_thread_id=thread_id)
        message_links[sent.message_id] = message.from_user.id
        print(f"[FORWARD] –ü–µ—Ä–µ—Å–ª–∞–Ω —Ç–µ–∫—Å—Ç –æ—Ç {message.from_user.id} ‚Üí –≥—Ä—É–ø–ø–∞ (msg_id={sent.message_id})")
    else:
        # –í–ª–æ–∂–µ–Ω–∏—è
        header = f"{prefix} –æ—Ç {user_name} (id={message.from_user.id}):"
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=header, message_thread_id=thread_id)
        copy = await message.send_copy(chat_id=ADMIN_CHAT_ID, message_thread_id=thread_id)
        message_links[copy.message_id] = message.from_user.id
        print(f"[FORWARD] –ü–µ—Ä–µ—Å–ª–∞–Ω —Ñ–∞–∏ÃÜ–ª –æ—Ç {message.from_user.id} ‚Üí –≥—Ä—É–ø–ø–∞ (msg_id={copy.message_id})")

# –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Üí –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message(F.chat.id == ADMIN_CHAT_ID)
async def admin_reply(message: Message):
    if not message.reply_to_message:
        return

    orig_msg_id = message.reply_to_message.message_id
    user_id = message_links.get(orig_msg_id)

    if not user_id:
        print(f"[WARN] Reply –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω: msg_id={orig_msg_id}")
        return

    text = f"üì© –û—Ç–≤–µ—Ç –æ—Ç —É—á–∏—Ç–µ–ª—è:\n\n{message.text or ''}"

    if message.text:
        await bot.send_message(chat_id=user_id, text=text)
        print(f"[REPLY] –û—Ç–≤–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç –∞–¥–º–∏–Ω–∞ ‚Üí {user_id}")

    if message.photo or message.document or message.video or message.audio or message.voice:
        await message.send_copy(chat_id=user_id)
        print(f"[REPLY] –û—Ç–≤–µ—Ç —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç –∞–¥–º–∏–Ω–∞ ‚Üí {user_id}")

# –ó–∞–ø—É—Å–∫
async def main():
    print("[BOT] –ó–∞–ø—É—Å–∫...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
